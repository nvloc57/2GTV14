// =======================================================
// PRISMA SCHEMA — FULL IDENTITY (7 TABLES) + PRODUCT DOMAIN
// DB: MySQL (đổi provider nếu dùng PostgreSQL)
// Conventions: DB snake_case, Prisma Model CamelCase
// =======================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // or "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================
// ENUMS
// ===========================

enum UserStatus {
  ACTIVE
  DISABLED
  BANNED
}

enum ProductStatus {
  ACTIVE
  ONLEAVE
  PENDING
  DELETED
  BANNED
  EXPIRED
}

// ===========================
// PART 1 — IDENTITY (7 TABLES)
// ===========================

model User {
  // core identity fields
  id                   String    @id @default(cuid()) @map("id")
  userName             String?   @map("user_name") @db.VarChar(256)
  normalizedUserName   String?   @map("normalized_user_name") @db.VarChar(256)
  email                String?   @map("email") @db.VarChar(256)
  normalizedEmail      String?   @map("normalized_email") @db.VarChar(256)
  emailConfirmed       Boolean   @default(false) @map("email_confirmed")
  passwordHash         String?   @map("password_hash") // Identity v3 PBKDF2
  securityStamp        String?   @map("security_stamp")
  concurrencyStamp     String?   @map("concurrency_stamp")
  phoneNumber          String?   @map("phone_number")
  phoneNumberConfirmed Boolean   @default(false) @map("phone_number_confirmed")
  twoFactorEnabled     Boolean   @default(false) @map("two_factor_enabled")
  lockoutEnd           DateTime? @map("lockout_end")
  lockoutEnabled       Boolean   @default(false) @map("lockout_enabled")
  accessFailedCount    Int       @default(0) @map("access_failed_count")

  // custom profile
  fullName   String?    @map("full_name")
  avatarUrl  String?    @map("avatar_url")
  reputation Float      @default(0) @map("reputation")
  status     UserStatus @default(ACTIVE) @map("status")
  // soft delete
  deletedAt  DateTime?  @map("deleted_at")

  // meta
  isActive  Boolean   @default(true) @map("is_active")
  lastLogin DateTime? @map("last_login")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // relations
  roles  UserRole[]
  claims UserClaim[]
  logins UserLogin[]
  tokens UserToken[]

  reviews  Review[]
  comments Comment[]
  Product  Product[]

  @@unique([normalizedUserName], map: "ux_users_normalized_user_name")
  @@index([normalizedEmail], map: "ix_users_normalized_email")
  @@map("users")
}

model Role {
  id               String  @id @default(cuid()) @map("id")
  name             String? @map("name") @db.VarChar(256)
  normalizedName   String? @map("normalized_name") @db.VarChar(256)
  concurrencyStamp String? @map("concurrency_stamp")

  users  UserRole[]
  claims RoleClaim[]

  @@unique([normalizedName], map: "ux_roles_normalized_name")
  @@map("roles")
}

model UserRole {
  // composite key like Identity
  userId String @map("user_id")
  roleId String @map("role_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model UserClaim {
  id         Int     @id @default(autoincrement()) @map("id")
  userId     String  @map("user_id")
  claimType  String? @map("claim_type")
  claimValue String? @map("claim_value")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "ix_user_claims_user_id")
  @@map("user_claims")
}

model RoleClaim {
  id         Int     @id @default(autoincrement()) @map("id")
  roleId     String  @map("role_id")
  claimType  String? @map("claim_type")
  claimValue String? @map("claim_value")

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([roleId], map: "ix_role_claims_role_id")
  @@map("role_claims")
}

model UserLogin {
  loginProvider       String  @map("login_provider")
  providerKey         String  @map("provider_key")
  providerDisplayName String? @map("provider_display_name")
  userId              String  @map("user_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([loginProvider, providerKey])
  @@index([userId], map: "ix_user_logins_user_id")
  @@map("user_logins")
}

model UserToken {
  userId        String  @map("user_id")
  loginProvider String  @map("login_provider")
  name          String  @map("name")
  value         String? @map("value")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, loginProvider, name])
  @@map("user_tokens")
}

// ===========================
// PART 2 — PRODUCT DOMAIN
// ===========================

model Product {
  id       Int     @id @default(autoincrement()) @map("id")
  name     String  @map("name")
  cverUrl String  @map("cver_url")
  cliUrl String  @map("cli_url")
  slug     String? @unique @map("slug")

  currentContact String? @map("current_contact")
  oldContact     String? @map("old_contact")

  dId    String? @map("dId")
  cId    String? @map("cId")
  addr    String? @map("addr")
  oldAddr String? @map("old_addr")

  originZone   OriginZone? @map("origin_zone")
  openForBooking String?     @map("openForBooking")

  ver123 String? @map("ver123")
  ver1   Int?    @map("ver1")
  ver2   Int?    @map("ver2")
  ver3   Int?    @map("ver3")

  tagsText String?      @map("tags_text")
  tags     ProductTag[]

  price           String? @map("price")
  reputationScore Float   @default(0) @map("reputation_score")

  status       ProductStatus  @default(ACTIVE) @map("status")
  deletedAt    DateTime?      @map("deleted_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  userId       String?
  ProductImage ProductImage[]
  Review       Review[]
  Comment      Comment[]
  User         User?          @relation(fields: [userId], references: [id])

  @@map("products")
}

enum OriginZone {
  NORTH
  CENTRAL
  SOUTH
  MEKONG
}

model Tag {
  id   Int    @id @default(autoincrement()) @map("id")
  name String @unique @map("name")

  products ProductTag[]

  @@map("tags")
}

// pivot Product ↔ Tag
model ProductTag {
  id        Int @id @default(autoincrement()) @map("id")
  productId Int @map("product_id")
  tagId     Int @map("tag_id")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId], map: "ux_product_tags_product_tag")
  @@index([tagId], map: "ix_product_tags_tag_id")
  @@map("product_tags")
}

// product images (portfolio)
model ProductImage {
  id        Int      @id @default(autoincrement()) @map("id")
  productId Int      @map("product_id")
  url       String   @map("url")
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "ix_product_images_product_id")
  @@map("product_images")
}

// reviews with soft delete
model Review {
  id        Int       @id @default(autoincrement()) @map("id")
  productId Int       @map("product_id")
  userId    String    @map("user_id")
  rating    Int       @map("rating") // 1..5
  content   String?   @map("content")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")

  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  images  ReviewImage[]

  @@index([productId], map: "ix_reviews_product_id")
  @@index([userId], map: "ix_reviews_user_id")
  @@map("reviews")
}

model ReviewImage {
  id        Int      @id @default(autoincrement()) @map("id")
  reviewId  Int      @map("review_id")
  imageUrl  String   @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId], map: "ix_review_images_review_id")
  @@map("review_images")
}

model Comment {
  id        Int      @id @default(autoincrement()) @map("id")
  productId Int      @map("product_id")
  userId    String?  @map("user_id")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([productId], map: "ix_comments_product_id")
  @@index([userId], map: "ix_comments_user_id")
  @@map("comments")
}
